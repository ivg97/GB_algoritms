"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""

data_users = [
    {'user1': ['passw1', {'active': True}]},
    {'user2': ['passw2', {'active': False}]},
    {'user3': ['passw3', {'active': False}]},
]                                                           # O(1)

"""
1                           O(n)
"""
def cheking_users(user):
    '''Checking users for account activation'''
    for i in range(len(data_users)):                                            # O(n)
        try:                                                                    # O(1)
            if data_users[i][user]:                                             # O(1)
                if data_users[i][user][1]['active'] == True:                    # O(1)
                    print('Ваша учетная запись уже активирована!')              # O(1)
                    break                                                       # O(1)
                else:                                                           # O(1)
                    print('Ваша учетная запись не активирована!')               # O(1)
                    password = input('Для активации введите пароль: ')          # O(1)
                    if password == data_users[i][user][0]:                      # O(1)
                        data_users[i][user][1]['active'] = True                 # O(1)
                        print('Ваша учетная запись активирована!')              # O(1)
                    else:                                                       # O(1)
                        print('Пароль не верный!')                              # O(1)

        except KeyError:                                                        # O(1)
            continue                                                            # O(1)

# cheking_users('user1')
# cheking_users('user2')


"""
2                               O(n^2)
"""

data_users_2 = [
    ['user1', 'passw1', {'active': True}],
    ['user2', 'passw2', {'active': False}],
    ['user3', 'passw3', {'active': False}],
]                                                                               # O(1)

def checing_users_2(user):
    user_list = list()                                                          # O(1)
    for i in data_users_2:                                                      # O(n)
        user_list.append(i[0])                                                  # O(1)
    if user in user_list:                                                       # O(n)
        if data_users_2[user_list.index(user)][2]['active'] == True:            # O(1)
            print('Доступ разрешен')                                            # O(1)
        else:                                                                   # O(1)
            print('Учетная запись не активирована')                             # O(1)
            request = input('Для активации нажмите q: ')                        # O(1)
            if request == 'q':                                                  # O(1)
                data_users_2[user_list.index(user)][2]['active'] = True         # O(1)
                print('Учетная запись активирована')                            # O(1)
    else:                                                                       # O(1)
        print('Доступ запрешен!')                                               # O(1)


# checing_users_2('user2')

'''
Вывод: Логично что первое решение будет выполняться быстрее, но я не уверен в правильности
определения сложности
'''