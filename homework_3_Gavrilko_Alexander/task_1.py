"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""

import time


def time_count(func):
    def count_t():
        start = time.time()
        func()
        finsh = time.time()
        print(f'Time - {finsh - start}')
    return count_t

@time_count
def filling_list():                     # O(n)
    lst = []
    lst = [0, 1, 2, 3, 4, 5, 'Hello', 'WORLD', '!']


@time_count
def filling_dict():                      # O(n)
    dct = {}
    dct[0] = 0
    dct[1] = 1
    dct[2] = 2
    dct[3] = 3
    dct[4] = 4
    dct[5] = 5
    dct[6] = 'Hello'
    dct[7] = 'WORLD'
    dct[8] = '!'




@time_count
def operation_list():                       # O(n^2)
    lst = [11, 22, 33]
    lst.append(1)
    lst.append(2)
    lst.append(3)
    lst.pop(0)
    lst.remove(2)
    lst.count(1)

@time_count
def operation_dict():                       # O(1)
    dct = {1: '1', 2: '2', 3: '3'}
    dct.keys()
    dct.pop(1)
    dct.get(2)
    dct.values()


filling_list()
filling_dict()
operation_list()
operation_dict()

'''
Согласно времени, списки и словари заполняются с небольшой разницей, а обрабатываются списки сравнительно дольше
из-за обхода от начала до конца. Словари обрабатваются быстро, так как словари организованы как хеш таблицы.
Получение элемента просиходит по без обхода всего словаря
'''