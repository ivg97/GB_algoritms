"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее).

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение. Обязательно сделайте замеры времени обеих реализаций
и укажите дала ли оптимизация эффективность.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.

Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""


'''
Реализовалсортировку методом пузырька по убыванию двумя способами.
Первый способ стандартный, какой был рассмотрен на уроке. Второй 
способ с выходом из цикла в случае, если список заранее отсортирован.
Исходя из замеров видно:  
Вариант без доработки занимает больше всего времени, тем более
чем больше элементов, тем во много больше рост времени.
Вариант с доработкой в разы сокращает время, на процентов 80-90. 
И если в вариант с доработкой добавить уже отсортированный список, то
время сократится на несколько процентов от времени, доработанного варианта.
По мне, так вариант с доработкой самый эффективный, так как навряд ли 
попадется уже отсортированный список для его дальнейшей сортировки. 
'''

import random
from timeit import timeit

def sorting_bubble(lst):
    n = 1
    while n < len(lst):
        for i in range(len(lst) - n):
            if lst[i] < lst[i + 1]:
                lst[i], lst[i + 1] = lst[i + 1], lst[i]

        n += 1
    return lst


def sorting_bubble_revision(lst):
    n = 1
    flag = True
    while n < len(lst):
        for i in range(len(lst) - n):
            if flag:
                if lst[i] < lst[i + 1]:
                    lst[i], lst[i + 1] = lst[i + 1], lst[i]
                else:
                    flag = False

        n += 1
    return lst


my_lst_10 = [random.randint(-100, 100) for i in range(10)]
sort_my_lst_10 = sorted(my_lst_10)

print('=' * 50, '\n', 'Замеры 10 элементов без доработки:\n',
    timeit(
        "sorting_bubble(my_lst_10[:])",
        globals=globals(),
        number=1000), '\n','-' * 50, '\n'
       ' Замеры 10 элементов с доработкой:\n',
    timeit(
          "sorting_bubble_revision(my_lst_10[:])",
          globals=globals(),
          number=1000), '\n','-' * 50, '\n'
        ' Замеры отсортированных 10 элементов с доработкой:\n',
    timeit(
          "sorting_bubble_revision(sort_my_lst_10[:])",
          globals=globals(),
          number=1000), '\n'
      )

my_lst_100 = [random.randint(-100, 100) for i in range(100)]
sort_my_lst_100 = sorted(my_lst_100)

print('=' * 50, '\n', 'Замеры 100 элементов без доработки:\n',
    timeit(
        "sorting_bubble(my_lst_100[:])",
        globals=globals(),
        number=1000), '\n','-' * 50, '\n'
       ' Замеры 100 элементов с доработкой:\n',
    timeit(
          "sorting_bubble_revision(my_lst_100[:])",
          globals=globals(),
          number=1000), '\n','-' * 50, '\n'
        ' Замеры отсортированных 100 элементов с доработкой:\n',
    timeit(
          "sorting_bubble_revision(sort_my_lst_100[:])",
          globals=globals(),
          number=1000), '\n'
      )



my_lst_1000 = [random.randint(-100, 100) for i in range(1000)]
sort_my_lst_1000 = sorted(my_lst_1000)

print('=' * 50, '\n', 'Замеры 1000 элементов без доработки:\n',
    timeit(
        "sorting_bubble(my_lst_1000[:])",
        globals=globals(),
        number=100), '\n','-' * 50, '\n'
       ' Замеры 1000 элементов с доработкой:\n',
    timeit(
          "sorting_bubble_revision(my_lst_1000[:])",
          globals=globals(),
          number=100), '\n','-' * 50, '\n'
        ' Замеры отсортированных 1000 элементов с доработкой:\n',
    timeit(
          "sorting_bubble_revision(sort_my_lst_1000[:])",
          globals=globals(),
          number=100), '\n'
      )

